(ns lambdajam.chapter3
  (:require [hoplon.reveal :refer [chapter slide notes bullet quicklist fragment-list annotation]]
            [lambdajam.sample-code :as sample-code]))


(defn slides []
  (chapter :title "Theory: Hierarchical Temporal Memory"
           (slide :title "Six Key Principles"
                  (fragment-list
                   "On-line Learning from Streaming Data"
                   "Hierarchy of Memory Regions"
                   "Sequence Memory"
                   "Sparse Distributed Representations"
                   "All Regions are both Sensory and Motor"
                   "Attention")
                  (notes ""))
           (slide :title "On-line Learning from Streaming Data"
                  (fragment-list
                   "Up to 10 million senses feed the brain"
                   "We don't (can't) store this data"
                   "We build models from live data"
                   "Models are updated with new data"))
           (slide :title "Hierarchy of Memory Regions"
                  (fragment-list
                   "Sensory data enters at the bottom"
                   "Models are built in every region"
                   "Things change more slowly as you go up"
                   "Hierarchy enables sequences of sequences"
                   "The hierarchy works upwards and downwards"))
           (slide :title "Sequence Memory"
                  (fragment-list
                   "All sensory data involves time"
                   "Sequence memory allows predictions"
                   "Structure in data is elaborated over time"
                   "Sequences can be composed in hierarchy"))
           (slide :title "Sparse Distributed Representations"
                  (fragment-list
                   "In each region, many neurons, few are active"
                   "SDRs represent spatial patterns"
                   "SDRs have many useful properties:"
                   "Fault-tolerant, semantic operations, high-capacity"
                   "Key to understanding and building intelligent systems"))
           (slide :title "All Regions are both Sensory and Motor"
                  (fragment-list
                   "Every region processes sensory data and produces behaviour"
                   "Behaviour provides context for sensory data"
                   "Structure in the model is navigated via behaviour"
                   "The neocortex learns to control the old brain"
                   "A sequence memory is a sensorimotor model of the world"))
           (slide :title "Attention"
                  (fragment-list
                   "We use attention to manage the neocortex"
                   "Attention allows for planning and previsualisation"
                   "Novel data or anomalies can 'demand attention'"
                   "Whole sub-hierarchies can be switched on or off"))

           (slide :title "HTML as s-expressions"
                  (ul
                   (li "HTML elements can be represented as ClojureScript")
                   (li "ClojureScript can be represented as HTML"))
                  (notes "One of the ideas that led to Hoplon is the idea that HTML is a "
                         "Lisp. In Hoplon, you can create pages using either HTML or "
                         "ClojureScript."))
           (slide :title "Hoplon with HTML syntax"
                  (sample-code/get-hoplon-with-html))
           (slide :title "Hoplon with CLJS syntax"
                  (sample-code/get-hoplon-with-cljs)
                  (notes "We are going to use the CLJS syntax for the rest of the "
                         "presentation, but the HTML syntax can do anything the CLJS "
                         "syntax can."))
           (slide :title "defelem"
                  (sample-code/get-hoplon-defelem)
                  (notes "defelem is the preferred way to create functions that act like "
                         "HTML elements. It allows for the syntactic sugar you see with "
                         "all Hoplon elements."))
           (slide :title "Slideshows with Hoplon"
                  (sample-code/get-hoplon-slidedeck))
           (slide :title "Hoplon as spreadsheet"
                  (ul
                   (li "Hoplon simplifies state by using cells")
                   (li "Cells work just like cells in a spreadsheet")
                   (li "Two kinds of cells: input and formula"))
                  (notes "Remember in a spreadsheet where you could have a cell A1 and a "
                         "cell B1 and then set C1 to the quotient of them? And when you "
                         "updated A1 or B1, C1 updated? Hoplon cells work just like this, "
                         "but instead of referencing them by letter and number, they are "
                         "referenced like any other Clojure value. They are a Clojure "
                         "reference type like atoms and the same functions work on them, "
                         "but they automatically propogate updates from input cells to "
                         "formula cells."))
           (slide :title "Hoplon cell example"
                  (sample-code/get-hoplon-cell)
                  (notes "You can see in the first four lines here how we set up an input "
                         "cell and three formula cells. When the value in state is "
                         "changed, the three formula cells are automatically updated. "
                         "The string interpolation below binds these text nodes to the "
                         "values of the formula cells. The change is propogated into the "
                         "text cells. "))
           (slide :title "Hoplon and the DOM"
                  (bullet "Hoplon uses the DOM for input and output. Examples:")
                  (ul
                   (li "on-click")
                   (li "on-change"))
                  (ul
                   (li "do-value")
                   (li "do-class"))
                  (notes "Hoplon uses the DOM for input and output. All user input is done "
                         "through DOM events like on-click and on-change. Code is attached "
                         "to these events, like you're used to from jQuery or other "
                         "libraries. Output is done by manipulating the properties of DOM "
                         "nodes using special do- attributes. The value of these "
                         "attributes is always a formula cell."))
           (slide :title "Hoplon DOM example"
                  (sample-code/get-hoplon-dom)
                  (notes "You can see in this input element an example of do- and on- "
                         "parameters. Starting with :do-focus, you can see that it's "
                         "looking at the value of the loaded? cell. If the loaded? cell "
                         "contains true, then focus on this input. This means that this "
                         "input will gain focus when loaded? becomes true. :do-attr sets "
                         "the placeholder attribute on this input based on the current "
                         "loading state. It uses an anonymous cell so that this will "
                         "update. We didn't have to use an anonymous cell with :do-focus "
                         "because loaded? is a cell. Lastly, look at :on-focusout. The do! "
                         "multimethod allows us to programmatically do the same thing we "
                         "do with the do- attributes: update a DOM element."))
           (slide :title "Full example of Hoplon"
                  (a :href "https://github.com/cndreisbach/codemash-2014-presentation/blob/master/todo-hoplon/src/index.cljs.hl"
                     :target "_blank"
                     "Code on GitHub"))
           (slide :title "Hoplon compiles to static files"
                  (ul
                   (li "They can be used anywhere")
                   (li "And with any backend")))))
